{"version":3,"file":"index.umd.production.min.js","sources":["../src/utils/isHTMLElement.ts","../src/constants.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isArray.ts","../src/utils/isObject.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/logic/transformToNestObject.ts","../src/utils/isUndefined.ts","../src/utils/filterOutFalsy.ts","../src/utils/get.ts","../src/logic/removeAllEventListeners.ts","../src/logic/getRadioValue.ts","../src/utils/isRadioInput.ts","../src/utils/isFileInput.ts","../src/utils/isCheckBoxInput.ts","../src/utils/isMultipleSelect.ts","../src/logic/getCheckboxValue.ts","../src/logic/getFieldValue.ts","../src/logic/getMultipleSelectValue.ts","../src/utils/isDetached.ts","../src/utils/isEmptyObject.ts","../src/utils/isBoolean.ts","../src/utils/unset.ts","../src/logic/findRemovedFieldAndRemoveListener.ts","../src/utils/isString.ts","../src/utils/isPrimitive.ts","../src/logic/getFieldsValues.ts","../src/utils/deepMerge.ts","../src/utils/isSameError.ts","../src/utils/isRegex.ts","../src/logic/getValueAndMessage.ts","../src/utils/isFunction.ts","../src/utils/isMessage.ts","../src/logic/getValidateError.ts","../src/logic/appendErrors.ts","../src/logic/validateField.ts","../src/utils/getPath.ts","../src/logic/assignWatchFields.ts","../src/logic/skipValidation.ts","../src/logic/getFieldArrayParentName.ts","../src/utils/deepEqual.ts","../src/logic/isNameInFieldArray.ts","../src/utils/validationModeChecker.ts","../src/utils/isRadioOrCheckbox.ts","../src/useForm.ts","../src/useFormContext.tsx","../src/logic/generateId.ts","../src/utils/remove.ts","../src/utils/move.ts","../src/utils/swap.ts","../src/utils/prepend.ts","../src/utils/insert.ts","../src/utils/fillEmptyArray.ts","../src/utils/filterBooleanArray.ts","../src/useFieldArray.ts","../src/controller.tsx","../src/logic/getInputValue.ts","../src/logic/shouldRenderBasedOnError.ts","../src/logic/attachEventListeners.ts","../src/utils/isSelectInput.ts","../src/logic/focusOnErrorField.ts","../src/utils/onDomRemove.ts","../src/useWatch.ts"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const VALUE = 'value';\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default (value: unknown): value is null | undefined => value == null;\n","export default <T>(value: unknown): value is T[] => Array.isArray(value);\n","import isNullOrUndefined from './isNullOrUndefined';\nimport isArray from './isArray';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","import isArray from './isArray';\n\nexport default (value: [] | string) =>\n  !isArray(value) &&\n  (/^\\w*$/.test(value) ||\n    !/\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/.test(value));\n","export default (input: string): (string | number)[] => {\n  const result: (string | number)[] = [];\n\n  input.replace(\n    /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g,\n    (\n      match: string,\n      mathNumber: string,\n      mathQuote: string,\n      originalString: string,\n    ): any => {\n      result.push(\n        mathQuote\n          ? originalString.replace(/\\\\(\\\\)?/g, '$1')\n          : mathNumber || match,\n      );\n    },\n  );\n\n  return result;\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(object: FieldValues, path: string, value: unknown) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues): any =>\n  Object.entries(data).reduce(\n    (previous: FieldValues, [key, value]): FieldValues => {\n      if (!isKey(key)) {\n        set(previous, key, value);\n        return previous;\n      }\n\n      return { ...previous, [key]: value };\n    },\n    {},\n  );\n","export default (val: unknown): val is undefined => val === undefined;\n","export default (value: any[]) => value.filter(Boolean);\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport filterOutFalsy from './filterOutFalsy';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = filterOutFalsy(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import isArray from '../utils/isArray';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isArray from '../utils/isArray';\nimport isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<FieldValues>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isArray from './isArray';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport isArray from '../utils/isArray';\nimport unset from '../utils/unset';\nimport filterOutFalsy from '../utils/filterOutFalsy';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    if (!isUndefined(value)) {\n      set(shallowFieldsStateRef.current, name, value);\n    }\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    const { options } = fieldRef;\n\n    if (isArray(options) && options.length) {\n      filterOutFalsy(options).forEach((option, index): void => {\n        const { ref } = option;\n        if ((ref && isDetached(ref) && isSameRef(option, ref)) || forceDelete) {\n          removeAllEventListeners(ref, handleChange);\n          unset(options, `[${index}]`);\n        }\n      });\n\n      if (options && !filterOutFalsy(options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport isArray from '../utils/isArray';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsStateRef?: React.MutableRefObject<Record<string, any>>,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return deepMerge(\n    { ...((shallowFieldsStateRef || {}).current || {}) },\n    transformToNestObject(output),\n  );\n};\n","import isObject from './isObject';\nimport isArray from './isArray';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      if (\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (isArray(targetValue) && isArray(sourceValue))\n      ) {\n        target[key] = deepMerge(targetValue, sourceValue);\n      } else {\n        target[key] = sourceValue;\n      }\n    } catch {}\n  }\n\n  return target;\n}\n","import isObject from './isObject';\nimport { FieldError } from '../types';\n\nexport default (\n  error: FieldError | undefined,\n  { type, types = {}, message }: FieldError,\n): boolean =>\n  isObject(error) &&\n  error.type === type &&\n  error.message === message &&\n  Object.keys(error.types || {}).length === Object.keys(types).length &&\n  Object.entries(error.types || {}).every(\n    ([key, value]) => types[key] === value,\n  );\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule, ValidationValueMessage } from '../types';\n\nconst isValueMessage = (\n  value?: ValidationRule,\n): value is ValidationValueMessage => isObject(value) && !isRegex(value);\n\nexport default (validationData?: ValidationRule) =>\n  isValueMessage(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const fields = fieldsRef.current;\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value: requiredValue, message: requiredMessage } = isMessage(\n      required,\n    )\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (requiredValue) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message: requiredMessage,\n        ref: isRadioOrCheckbox\n          ? (((fields[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, requiredMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\n    const { value: minValue, message: minMessage } = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxMessage,\n        minMessage,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const {\n      value: maxLengthValue,\n      message: maxLengthMessage,\n    } = getValueAndMessage(maxLength);\n    const {\n      value: minLengthValue,\n      message: minLengthMessage,\n    } = getValueAndMessage(minLength);\n    const inputLength = value.toString().length;\n    const exceedMax =\n      !isNullOrUndefined(maxLengthValue) && inputLength > maxLengthValue;\n    const exceedMin =\n      !isNullOrUndefined(minLengthValue) && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message: patternMessage } = getValueAndMessage(\n      pattern,\n    );\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import isObject from '../utils/isObject';\nimport isArray from '../utils/isArray';\n\nexport default function deepEqual(object1: any = [], object2: any = []) {\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n\n    if (\n      (isObject(val1) || isArray(val1)) && (isObject(val2) || isArray(val2))\n        ? !deepEqual(val1, val2)\n        : val1 !== val2\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}[\\\\d+]`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport shouldRenderBasedOnError from './logic/shouldRenderBasedOnError';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isArray from './utils/isArray';\nimport isString from './utils/isString';\nimport isSameError from './utils/isSameError';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  FieldError,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  DefaultValuesAtRender,\n  InternalFieldErrors,\n  NestedValue,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  NonUndefined,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef(\n    new Set<InternalFieldName<TFieldValues>>(),\n  );\n  const watchFieldsHookRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Set<InternalFieldName<TFieldValues>>>\n  >({});\n  const watchFieldsHookRenderRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, Function>\n  >({});\n  const fieldsWithValidationRef = React.useRef({});\n  const validFieldsRef = React.useRef({});\n  const defaultValuesRef = React.useRef<\n    | FieldValue<UnpackNestedValue<TFieldValues>>\n    | UnpackNestedValue<DeepPartial<TFieldValues>>\n  >(defaultValues);\n  const defaultValuesAtRenderRef = React.useRef(\n    {} as DefaultValuesAtRender<TFieldValues>,\n  );\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef(\n    shouldUnregister ? {} : defaultValues,\n  );\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<Set<InternalFieldName<FieldValues>>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const {\n    current: { isOnSubmit, isOnTouch },\n  } = modeRef;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    current: { isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange },\n  } = React.useRef(modeChecker(reValidateMode));\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: InternalFieldErrors<TFieldValues>,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        shouldRenderBasedOnError<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (isEmptyObject(error)) {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      } else {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !isSameError(previousError, error[name] as FieldError);\n\n        set(formStateRef.current.errors, name, error[name]);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      { ref, options }: Field,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref) && options) {\n        options.forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string).includes(selectRef.value)),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): {\n      dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    } => {\n      if (\n        !fieldsRef.current[name] ||\n        (!readFormStateRef.current.isDirty &&\n          !readFormStateRef.current.dirtyFields)\n      ) {\n        return {};\n      }\n\n      const isFieldDirty =\n        defaultValuesAtRenderRef.current[name] !==\n        getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n      const previousIsDirty = formStateRef.current.isDirty;\n\n      isFieldDirty\n        ? set(formStateRef.current.dirtyFields, name, true)\n        : unset(formStateRef.current.dirtyFields, name);\n\n      const state = {\n        isDirty:\n          (isFieldArray &&\n            !deepEqual(\n              get(getValues(), getFieldArrayParentName(name)),\n              get(defaultValuesRef.current, getFieldArrayParentName(name)),\n            )) ||\n          !isEmptyObject(formStateRef.current.dirtyFields),\n        dirtyFields: formStateRef.current.dirtyFields,\n      };\n\n      const isChanged =\n        (readFormStateRef.current.isDirty &&\n          previousIsDirty !== state.isDirty) ||\n        (readFormStateRef.current.dirtyFields &&\n          isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n      if (isChanged && shouldRender) {\n        formStateRef.current = {\n          ...formStateRef.current,\n          ...state,\n        };\n        updateFormState({\n          ...state,\n        });\n      }\n\n      return isChanged ? state : {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (fieldsRef.current[name]) {\n        const error = await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        );\n\n        shouldRenderBaseOnError(name, error, skipReRender);\n\n        return isEmptyObject(error);\n      }\n\n      return false;\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      payload:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues() as TFieldValues,\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (isArray(payload)) {\n        const isInputsValid = payload\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, payload);\n\n        shouldRenderBaseOnError(\n          payload,\n          (error ? { [payload]: error } : {}) as InternalFieldErrors<\n            TFieldValues\n          >,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (isArray(fields)) {\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends string, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      getPath(name, value).forEach((fieldName) => {\n        const data = {};\n        const field = fieldsRef.current[fieldName];\n\n        if (field) {\n          set(data, name, value);\n          setFieldValue(field, get(data, fieldName));\n\n          if (shouldDirty) {\n            updateAndGetDirtyState(fieldName);\n          }\n\n          if (shouldValidate) {\n            trigger(fieldName as FieldName<TFieldValues>);\n          }\n        }\n      });\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      value: FieldValue<TFieldValues> | null | undefined | boolean,\n      config: SetValueConfig,\n    ) => {\n      if (fieldsRef.current[name]) {\n        setFieldValue(fieldsRef.current[name] as Field, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (\n          isNameInFieldArray(fieldArrayNamesRef.current, name) ||\n          fieldArrayNamesRef.current.has(name)\n        ) {\n          const fieldArrayParentName = getFieldArrayParentName(name) || name;\n          fieldArrayDefaultValuesRef.current[fieldArrayParentName] = value;\n          resetFieldArrayFunctionRef.current[fieldArrayParentName]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = (name: string) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = (name: string, found = true): boolean => {\n    if (!isEmptyObject(watchFieldsHookRef.current)) {\n      for (const key in watchFieldsHookRef.current) {\n        if (\n          !name ||\n          watchFieldsHookRef.current[key].has(name) ||\n          watchFieldsHookRef.current[key].has(getFieldArrayParentName(name)) ||\n          !watchFieldsHookRef.current[key].size\n        ) {\n          watchFieldsHookRenderRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    value: NonUndefined<TFieldValue> extends NestedValue<infer U>\n      ? U\n      : UnpackNestedValue<DeepPartial<LiteralToPrimitive<TFieldValue>>>,\n    config: SetValueConfig = {},\n  ): void {\n    setInternalValue(name, value as TFieldValues[string], config);\n\n    if (isFieldWatched(name)) {\n      updateFormState();\n    }\n\n    renderWatchedInputs(name);\n\n    if (config.shouldValidate) {\n      trigger(name as any);\n    }\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        const name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error: InternalFieldErrors<TFieldValues>;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues() as TFieldValues,\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n\n            error = (get(errors, name)\n              ? { [name]: get(errors, name) }\n              : {}) as InternalFieldErrors<TFieldValues>;\n\n            isValid = isEmptyObject(errors);\n\n            if (previousFormIsValid !== isValid) {\n              shouldRender = true;\n            }\n          } else {\n            error = await validateField<TFieldValues>(\n              fieldsRef,\n              isValidateAllFieldCriteria,\n              field,\n              shallowFieldsStateRef,\n            );\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return getFieldsValues(fieldsRef, shallowFieldsStateRef);\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...defaultValuesRef.current,\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n      const isValid = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValid) {\n        updateFormState({\n          isValid,\n        });\n      }\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field: Field | undefined, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !filterOutFalsy(field.options || []).length) {\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          unset(formStateRef.current.dirtyFields, field.ref.name);\n          unset(formStateRef.current.touched, field.ref.name);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: !isEmptyObject(formStateRef.current.dirtyFields),\n            dirtyFields: formStateRef.current.dirtyFields,\n            touched: formStateRef.current.touched,\n          });\n\n          resolverRef.current && validateResolver();\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName]\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(\n    name: FieldName<TFieldValues>,\n    error: ErrorOption = {},\n  ): void {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    (\n      fieldNames?: string | string[],\n      defaultValue?: unknown,\n      watchId?: string,\n    ) => {\n      const watchFields = watchId\n        ? watchFieldsHookRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      const fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        shallowFieldsStateRef,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      if (isUndefined(watchId)) {\n        isWatchAllRef.current = true;\n      }\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    (isArray(name) ? name : [name]).forEach((fieldName) =>\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true),\n    );\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let isFieldArray;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? isArray(field.options) &&\n          filterOutFalsy(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...filterOutFalsy((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(field, defaultValue);\n      }\n    }\n\n    if (resolver && !isFieldArray && readFormStateRef.current.isValid) {\n      validateResolver();\n    } else if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      defaultValuesAtRenderRef.current[name] = isEmptyDefaultValue\n        ? isObject(fieldValue)\n          ? { ...fieldValue }\n          : fieldValue\n        : defaultValue;\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues: FieldValues = getFieldsValues(\n        fieldsRef,\n        shallowFieldsStateRef,\n        true,\n      );\n\n      if (readFormStateRef.current.isSubmitting) {\n        updateFormState({\n          isSubmitting: true,\n        });\n      }\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues as TFieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = errors;\n          fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every((name) =>\n            Object.keys(fieldsRef.current).includes(name),\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(\n            fieldValues as UnpackNestedValue<TSubmitFieldValues>,\n            e,\n          );\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          if (onInvalid) {\n            await onInvalid(fieldErrors, e);\n          }\n          if (shouldFocusError) {\n            focusOnErrorField(fieldsRef.current, fieldErrors);\n          }\n        }\n      } finally {\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = new Set();\n      fieldsWithValidationRef.current = new Set();\n    }\n\n    defaultValuesAtRenderRef.current = {} as DefaultValuesAtRender<\n      TFieldValues\n    >;\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isValid: isValid ? formStateRef.current.isValid : true,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n\n    defaultValuesRef.current = values || { ...defaultValuesRef.current };\n\n    if (values) {\n      renderWatchedInputs('');\n    }\n\n    shallowFieldsStateRef.current = shouldUnregister ? {} : values || {};\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    resetRefs(omitResetState);\n  };\n\n  observerRef.current =\n    observerRef.current || !isWeb\n      ? observerRef.current\n      : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n\n  React.useEffect(() => {\n    isUnMount.current = false;\n\n    return () => {\n      isUnMount.current = true;\n\n      if (observerRef.current) {\n        observerRef.current.disconnect();\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      fieldsRef.current &&\n        Object.values(fieldsRef.current).forEach((field) =>\n          removeFieldEventListenerAndRef(field, true),\n        );\n    };\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = {\n    removeFieldEventListener,\n    renderWatchedInputs,\n    watchInternal,\n    mode: modeRef.current,\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnChange,\n    },\n    fieldsRef,\n    isWatchAllRef,\n    watchFieldsRef,\n    resetFieldArrayFunctionRef,\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    fieldArrayDefaultValuesRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayNamesRef,\n    readFormStateRef,\n    formStateRef,\n    defaultValuesRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    shouldUnregister,\n    validateResolver: resolver ? validateResolver : undefined,\n    ...commonProps,\n  };\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (\n              process.env.NODE_ENV !== 'production' &&\n              prop === 'isValid' &&\n              isOnSubmit\n            ) {\n              console.warn(\n                '📋 `formState.isValid` is applicable with `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n              );\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\nimport filterOutFalsy from './filterOutFalsy';\n\nconst removeAt = <T>(data: T[], index: number): T[] => [\n  ...data.slice(0, index),\n  ...data.slice(index + 1),\n];\n\nfunction removeAtIndexes<T>(data: T[], index: number[]): T[] {\n  let k = -1;\n\n  while (++k < data.length) {\n    if (index.indexOf(k) >= 0) {\n      delete data[k];\n    }\n  }\n\n  return filterOutFalsy(data);\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : isArray(index)\n    ? removeAtIndexes(data, index)\n    : removeAt(data, index);\n","import isUndefined from './isUndefined';\nimport isArray from './isArray';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","import isArray from './isArray';\n\nexport default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(isArray(value) ? value : [value || undefined]), ...data];\n}\n","import isArray from './isArray';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","import isArray from './isArray';\n\nexport default <T>(value: T | T[]): undefined[] | undefined =>\n  isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isArray from './isArray';\nimport isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((isArray(value) ? value : [value]) as T[]).map(mapValueToBoolean).flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport deepEqual from './utils/deepEqual';\nimport getFieldArrayParentName from './logic/getFieldArrayParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport isUndefined from './utils/isUndefined';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport isArray from './utils/isArray';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport filterBooleanArray from './utils/filterBooleanArray';\nimport filterOutFalsy from './utils/filterOutFalsy';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n} from './types';\n\nconst appendId = <TValue extends object, TKeyName extends string>(\n  value: TValue,\n  keyName: TKeyName,\n): Partial<ArrayField<TValue, TKeyName>> => ({\n  [keyName]: generateId(),\n  ...value,\n});\n\nconst mapIds = <TData extends object, TKeyName extends string>(\n  data: TData | TData[],\n  keyName: TKeyName,\n) => (isArray(data) ? data : []).map((value) => appendId(value, keyName));\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n\n    if (!name) {\n      console.warn(\n        '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isWatchAllRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    formStateRef: {\n      current: { dirtyFields, touched },\n    },\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    watchFieldsRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    renderWatchedInputs,\n    getValues,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const getDefaultValues = () => [\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(defaultValuesRef.current, name, [])),\n  ];\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>(\n    getDefaultValues(),\n  );\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  const allFields = React.useRef<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(fields);\n\n  const getCurrentFieldsValues = () =>\n    get(getValues() || {}, name, allFields.current).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...allFields.current[index],\n        ...item,\n      }),\n    );\n\n  allFields.current = fields;\n  fieldArrayNamesRef.current.add(name);\n\n  if (!get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      get(defaultValuesRef.current, fieldArrayParentName),\n    );\n  }\n\n  const appendValueWithKey = (values: Partial<TFieldArrayValues>[]) =>\n    values.map((value: Partial<TFieldArrayValues>) => appendId(value, keyName));\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = {};\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const getIsDirtyState = (\n    flagOrFields?: (Partial<TFieldArrayValues> | undefined)[],\n  ): boolean =>\n    (readFormStateRef.current.isDirty ||\n      readFormStateRef.current.dirtyFields) &&\n    (isUndefined(flagOrFields) ||\n      !deepEqual(\n        flagOrFields.map(({ [keyName]: omitted, ...rest } = {}) => rest),\n        get(defaultValuesRef.current, name),\n      ));\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n      }\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !filterOutFalsy(get(ref, name, [])).length && unset(ref, name);\n\n  const batchStateUpdate = <T extends Function>(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    isDirty = true,\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n      cleanup(shallowFieldsStateRef.current);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(touched, name)) {\n      const output = method(get(touched, name), args.argA, args.argB);\n      shouldSet && set(touched, name, output);\n      cleanup(touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(get(dirtyFields, name, []), args.argC, args.argD);\n      shouldSet && set(dirtyFields, name, output);\n      cleanup(dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields,\n      isDirty,\n      touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    setFieldAndValidState([\n      ...allFields.current,\n      ...(isArray(value)\n        ? appendValueWithKey(value)\n        : [appendId(value, keyName)]),\n    ]);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      set(dirtyFields, name, [\n        ...get(dirtyFields, name, fillEmptyArray(allFields.current)),\n        ...filterBooleanArray(value),\n      ]);\n      updateFormState({\n        isDirty: true,\n        dirtyFields,\n      });\n    }\n\n    focusIndexRef.current = shouldFocus ? allFields.current.length : -1;\n    renderWatchedInputs(name);\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n\n    setFieldAndValidState(\n      prependAt(\n        getCurrentFieldsValues(),\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(prependAt, {\n      argA: emptyArray,\n      argC: filterBooleanArray(value),\n    });\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    setFieldAndValidState(removeArrayAt(fieldValues, index));\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      getIsDirtyState(removeArrayAt(fieldValues, index)),\n      true,\n      true,\n    );\n\n    renderWatchedInputs(name);\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n\n    setFieldAndValidState(\n      insertAt(\n        fieldValues,\n        index,\n        isArray(value) ? appendValueWithKey(value) : [appendId(value, keyName)],\n      ),\n    );\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: filterBooleanArray(value),\n      },\n      getIsDirtyState(insertAt(fieldValues, index)),\n    );\n    renderWatchedInputs(name);\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n    renderWatchedInputs(name);\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      getIsDirtyState(fieldValues),\n      false,\n    );\n    renderWatchedInputs(name);\n  };\n\n  const reset = <TFieldValues>(\n    data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ) => {\n    resetFields();\n    !data && unset(fieldArrayDefaultValuesRef.current, name);\n    unset(shallowFieldsStateRef.current, name);\n    memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n    setFields(mapIds(memoizedDefaultValues.current, keyName));\n  };\n\n  React.useEffect(() => {\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      let shouldRenderUseWatch = true;\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          shouldRenderUseWatch = false;\n          break;\n        }\n      }\n\n      shouldRenderUseWatch && renderWatchedInputs(name);\n    }\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = reset;\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport getInputValue from './logic/getInputValue';\nimport skipValidation from './logic/skipValidation';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport { useFormContext } from './useFormContext';\nimport { VALUE } from './constants';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\nconst Controller = <\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  as,\n  render,\n  defaultValue,\n  control,\n  onFocus,\n  ...rest\n}: ControllerProps<TAs, TControl>) => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production' && !control && !methods) {\n    throw new Error(\n      '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n    );\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const onFocusRef = React.useRef(onFocus);\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isUndefined(value)) {\n      console.warn(\n        `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n      );\n    }\n\n    if ((!as && !render) || (as && render)) {\n      console.warn(\n        `📋 ${name} Controller should use either the 'as' or 'render' prop, not both. https://react-hook-form.com/api#Controller`,\n      );\n    }\n\n    if (!isNotFieldArray && isUndefined(defaultValue)) {\n      console.warn(\n        '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const shouldValidate = (isBlurEvent?: boolean) =>\n    !skipValidation({\n      isBlurEvent,\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      isTouched: !!get(touched, name),\n      ...mode,\n    });\n\n  const commonTask = ([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const registerField = React.useCallback(() => {\n    if (process.env.NODE_ENV !== 'production' && !name) {\n      return console.warn(\n        '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = {\n        ref: fieldsRef.current[name]!.ref,\n        ...rules,\n      };\n    } else {\n      register(\n        Object.defineProperty({ name, focus: onFocusRef.current }, VALUE, {\n          set(data) {\n            setInputStateValue(data);\n            valueRef.current = data;\n          },\n          get() {\n            return valueRef.current;\n          },\n        }),\n        rules,\n      );\n      if (isNotFieldArray && !get(defaultValuesRef.current, name)) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  }, [rules, name, register]);\n\n  React.useEffect(\n    () => () => {\n      !isNameInFieldArray(fieldArrayNamesRef.current, name) && unregister(name);\n    },\n    [unregister, name, fieldArrayNamesRef],\n  );\n\n  React.useEffect(() => {\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    if (!fieldsRef.current[name]) {\n      registerField();\n      if (isNotFieldArray) {\n        setInputStateValue(getInitialValue());\n      }\n    }\n  });\n\n  const onBlur = () => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    if (shouldValidate(true)) {\n      trigger(name);\n    }\n  };\n\n  const onChange = (...event: any[]) =>\n    setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true,\n    });\n\n  const props = {\n    ...rest,\n    onChange,\n    onBlur,\n    name,\n    value,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, props)\n      : React.createElement(as as string, props as any)\n    : render\n    ? render({\n        onChange,\n        onBlur,\n        value,\n        name,\n      })\n    : null;\n};\n\nexport { Controller };\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import isEmptyObject from '../utils/isEmptyObject';\nimport isSameError from '../utils/isSameError';\nimport get from '../utils/get';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  InternalFieldErrors,\n  FieldNamesMarkedBoolean,\n} from '../types';\n\nexport default function shouldRenderBasedOnError<\n  TFieldValues extends FieldValues\n>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: InternalFieldErrors<TFieldValues>;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && get(validFields, name)) {\n    return false;\n  }\n\n  if (\n    isFormValid !== isFieldValid ||\n    (!isFormValid && !existFieldError) ||\n    (isFieldValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  ) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import get from '../utils/get';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport isArray from './utils/isArray';\nimport isObject from './utils/isObject';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n\n    if (name === '') {\n      console.warn(\n        '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    watchFieldsHookRef,\n    watchFieldsHookRenderRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const [value, setValue] = React.useState<unknown>(\n    isUndefined(defaultValue)\n      ? isString(name)\n        ? get(defaultValuesRef.current, name)\n        : isArray(name)\n        ? name.reduce(\n            (previous, inputName) => ({\n              ...previous,\n              [inputName]: get(defaultValuesRef.current, inputName),\n            }),\n            {},\n          )\n        : defaultValuesRef.current\n      : defaultValue,\n  );\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  const updateWatchValue = React.useCallback(() => {\n    const value = watchInternal(name, defaultValueRef.current, idRef.current);\n    setValue(\n      isObject(value) ? { ...value } : isArray(value) ? [...value] : value,\n    );\n  }, [setValue, watchInternal, defaultValueRef, name, idRef]);\n\n  React.useEffect(() => {\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = watchFieldsHookRenderRef.current;\n    const watchFieldsHook = watchFieldsHookRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = updateWatchValue;\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    updateWatchValue,\n    watchFieldsHookRenderRef,\n    watchFieldsHookRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return (isUndefined(value) ? defaultValue : value) as TWatchFieldValues;\n}\n"],"names":["value","HTMLElement","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","Array","isArray","isObjectType","isNullOrUndefined","Date","test","input","result","replace","match","mathNumber","mathQuote","originalString","push","set","object","path","index","tempPath","isKey","stringToPath","length","lastIndex","key","newValue","objValue","isObject","isNaN","data","Object","entries","reduce","previous","[object Object]","val","undefined","filter","Boolean","obj","defaultValue","filterOutFalsy","split","isUndefined","ref","validateWithStateUpdate","isHTMLElement","removeEventListener","defaultReturn","isValid","options","option","checked","element","type","defaultResult","validResult","values","map","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","field","current","disabled","isFileInput","files","isRadioInput","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","get","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","keys","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isEmptyObject","isBoolean","isSameRef","fieldValue","search","output","isString","startsWith","find","deepMerge","target","source","isPrimitive","targetValue","sourceValue","transformToNestObject","error","types","message","every","RegExp","validationData","isValueMessage","isRegex","isValidElement","getValidateError","isMessage","validateAllFieldCriteria","errors","async","required","maxLength","minLength","min","max","pattern","validate","fields","isRadio","isCheckBoxInput","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","requiredValue","requiredMessage","getValueAndMessage","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","valueAsNumber","parseFloat","valueDate","valueAsDate","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","getFieldsValue","validateRef","isFunction","validateError","validationResult","validateFunction","getPath","pathWithIndex","getInnerPath","flat","Infinity","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","forEach","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","substring","indexOf","deepEqual","object1","object2","keys1","keys2","val1","val2","isMatchFieldArrayName","searchName","names","some","mode","isOnSubmit","isWindowUndefined","window","isWeb","document","isProxyEnabled","Proxy","FormContext","React.createContext","displayName","useFormContext","React.useContext","d","performance","now","c","r","Math","random","removeAtIndexes","removeAt","from","to","splice","indexA","indexB","temp","prepend","insert","fill","mapValueToBoolean","appendId","keyName","generateId","mapIds","_a","rules","as","render","control","onFocus","rest","methods","defaultValuesRef","setValue","register","unregister","trigger","reValidateMode","formStateRef","touched","updateFormState","readFormStateRef","fieldArrayNamesRef","isNotFieldArray","isNameInFieldArray","getInitialValue","setInputStateValue","React.useState","valueRef","React.useRef","onFocusRef","shouldValidate","skipValidation","commonTask","event","getInputValue","registerField","React.useCallback","defineProperty","focus","React.useEffect","onBlur","onChange","shouldDirty","props","React.isValidElement","React.cloneElement","React.createElement","children","Provider","focusIndexRef","isWatchAllRef","resetFieldArrayFunctionRef","removeFieldEventListener","dirtyFields","watchFieldsRef","validFieldsRef","fieldsWithValidationRef","fieldArrayDefaultValuesRef","validateResolver","renderWatchedInputs","getValues","fieldArrayParentName","getFieldArrayParentName","memoizedDefaultValues","setFields","allFields","getCurrentFieldsValues","appendValueWithKey","setFieldAndValidState","fieldsValues","getIsDirtyState","flagOrFields","isDirty","_b","resetFields","cleanup","batchStateUpdate","method","args","shouldSet","shouldUpdateValid","argA","argB","argC","argD","reset","defaultValues","pop","shouldRenderUseWatch","watchField","resetFunctions","fieldArrayNames","delete","swap","swapArrayAt","move","moveArrayAt","shouldFocus","emptyArray","fillEmptyArray","prependAt","filterBooleanArray","append","remove","removeArrayAt","insertAt","resolver","context","shouldFocusError","shouldUnregister","criteriaMode","Set","watchFieldsHookRef","watchFieldsHookRenderRef","defaultValuesAtRenderRef","isUnMount","handleChangeRef","contextRef","resolverRef","modeRef","modeChecker","isValidateAllFieldCriteria","formState","setFormState","submitCount","isSubmitting","isSubmitSuccessful","observerRef","state","shouldRenderBaseOnError","shouldRender","shouldReRender","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","isSameError","shouldRenderBasedOnError","previousError","setFieldValue","rawValue","radioRef","selectRef","includes","checkboxRef","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","isFieldArray","previousIsDirty","isChanged","executeValidation","skipReRender","validateField","executeSchemaOrResolverValidation","payload","previousFormIsValid","isInputsValid","Promise","all","setInternalValues","setInternalValue","config","has","isFieldWatched","found","size","getFieldsValues","shouldSkipValidation","forceDelete","handleChange","fieldRef","removeAllEventListeners","findRemovedFieldAndRemoveListener","removeFieldEventListenerAndRef","watchInternal","fieldNames","watchId","combinedDefaultValues","assignWatchFields","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isRadioOrCheckboxFunction","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","shouldAttachChangeEvent","addEventListener","attachEventListeners","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldErrors","fieldError","focusOnErrorField","observer","MutationObserver","observe","childList","subtree","onDomRemove","disconnect","commonProps","refOrValidationOptions","watch","prop","omitResetState","inputRef","closest","resetFieldArray","resetRefs","clearErrors","inputName","setError","idRef","defaultValueRef","updateWatchValue","id","watchFieldsHookRender","watchFieldsHook"],"mappings":"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"}