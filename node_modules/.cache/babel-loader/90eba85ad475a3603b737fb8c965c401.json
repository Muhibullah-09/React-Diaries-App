{"ast":null,"code":"import { handleErrors } from '../server';\nimport dayjs from 'dayjs';\nexport const create = (schema, req) => {\n  try {\n    const {\n      title,\n      type,\n      userId\n    } = JSON.parse(req.requestBody);\n    const exUser = schema.users.findBy({\n      id: userId\n    });\n\n    if (!exUser) {\n      return handleErrors(null, 'No such user exists.');\n    }\n\n    const now = dayjs().format();\n    const diary = exUser.createDiary({\n      title,\n      type,\n      createdAt: now,\n      updatedAt: now\n    });\n    return {\n      user: { ...exUser.attrs\n      },\n      diary: diary.attrs\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to create Diary.');\n  }\n};\nexport const addEntry = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const {\n      title,\n      content\n    } = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    const entry = diary.createEntry({\n      title,\n      content,\n      createdAt: now,\n      updatedAt: now\n    });\n    diary.update({ ...diary.attrs,\n      updatedAt: now\n    });\n    return {\n      diary: diary.attrs,\n      entry: entry.attrs\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to save entry.');\n  }\n};\nexport const getDiaries = (schema, req) => {\n  try {\n    const user = schema.users.find(req.params.id);\n    return user.diary;\n  } catch (error) {\n    return handleErrors(error, 'Could not get user diaries.');\n  }\n};\nexport const getEntries = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    return diary.entry;\n  } catch (error) {\n    return handleErrors(error, 'Failed to get Diary entries.');\n  }\n};\nexport const updateDiary = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const data = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    diary.update({ ...data,\n      updatedAt: now\n    });\n    return diary.attrs;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update Diary.');\n  }\n};\nexport const updateEntry = (schema, req) => {\n  try {\n    const entry = schema.entries.find(req.params.id);\n    const data = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    entry.update({ ...data,\n      updatedAt: now\n    });\n    return entry.attrs;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update entry.');\n  }\n};","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/diaries-app/src/services/mirage/routes/diary.ts"],"names":["handleErrors","dayjs","create","schema","req","title","type","userId","JSON","parse","requestBody","exUser","users","findBy","id","now","format","diary","createDiary","createdAt","updatedAt","user","attrs","error","addEntry","diaries","find","params","content","entry","createEntry","update","getDiaries","getEntries","updateDiary","data","updateEntry","entries"],"mappings":"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","sourcesContent":["import { Response, Request } from 'miragejs';\nimport { handleErrors } from '../server';\nimport { Diary } from '../../../interfaces/diary.interface';\nimport { Entry } from '../../../interfaces/entry.interface';\nimport dayjs from 'dayjs';\nimport { User } from '../../../interfaces/user.interface';\n\nexport const create = (\n  schema: any,\n  req: Request\n): { user: User; diary: Diary } | Response => {\n  try {\n    const { title, type, userId } = JSON.parse(req.requestBody) as Partial<\n      Diary\n    >;\n    const exUser = schema.users.findBy({ id: userId });\n    if (!exUser) {\n      return handleErrors(null, 'No such user exists.');\n    }\n    const now = dayjs().format();\n    const diary = exUser.createDiary({\n      title,\n      type,\n      createdAt: now,\n      updatedAt: now,\n    });\n    return {\n      user: {\n        ...exUser.attrs,\n      },\n      diary: diary.attrs,\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to create Diary.');\n  }\n};\n\nexport const addEntry = (\n  schema: any,\n  req: Request\n): { diary: Diary; entry: Entry } | Response => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const { title, content } = JSON.parse(req.requestBody) as Partial<Entry>;\n    const now = dayjs().format();\n    const entry = diary.createEntry({\n      title,\n      content,\n      createdAt: now,\n      updatedAt: now,\n    });\n    diary.update({\n      ...diary.attrs,\n      updatedAt: now,\n    });\n    return {\n      diary: diary.attrs,\n      entry: entry.attrs,\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to save entry.');\n  }\n};\n\nexport const getDiaries = (schema: any, req: Request): Diary[] | Response => {\n  try {\n    const user = schema.users.find(req.params.id);\n    return user.diary as Diary[];\n  } catch (error) {\n    return handleErrors(error, 'Could not get user diaries.');\n  }\n};\n\nexport const getEntries = (\n  schema: any,\n  req: Request\n): { entries: Entry[] } | Response => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    return diary.entry;\n  } catch (error) {\n    return handleErrors(error, 'Failed to get Diary entries.');\n  }\n};\n\nexport const updateDiary = (schema: any, req: Request): Diary | Response => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const data = JSON.parse(req.requestBody) as Partial<Diary>;\n    const now = dayjs().format();\n    diary.update({\n      ...data,\n      updatedAt: now,\n    });\n    return diary.attrs as Diary;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update Diary.');\n  }\n};\n\nexport const updateEntry = (schema: any, req: Request): Entry | Response => {\n  try {\n    const entry = schema.entries.find(req.params.id);\n    const data = JSON.parse(req.requestBody) as Partial<Entry>;\n    const now = dayjs().format();\n    entry.update({\n      ...data,\n      updatedAt: now,\n    });\n    return entry.attrs as Entry;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update entry.');\n  }\n};\n"]},"metadata":{},"sourceType":"module"}