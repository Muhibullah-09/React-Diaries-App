{"ast":null,"code":"import { handleErrors } from '../server';\nimport dayjs from 'dayjs';\nexport const create = (schema, req) => {\n  try {\n    const {\n      title,\n      type,\n      userId\n    } = JSON.parse(req.requestBody);\n    const exUser = schema.users.findBy({\n      id: userId\n    });\n\n    if (!exUser) {\n      return handleErrors(null, 'No such user exists.');\n    }\n\n    const now = dayjs().format();\n    const diary = exUser.createDiary({\n      title,\n      type,\n      createdAt: now,\n      updatedAt: now\n    });\n    return {\n      user: { ...exUser.attrs\n      },\n      diary: diary.attrs\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to create Diary.');\n  }\n};\nexport const updateDiary = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const data = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    diary.update({ ...data,\n      updatedAt: now\n    });\n    return diary.attrs;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update Diary.');\n  }\n};\nexport const getDiaries = (schema, req) => {\n  try {\n    const user = schema.users.find(req.params.id);\n    return user.diary;\n  } catch (error) {\n    return handleErrors(error, 'Could not get user diaries.');\n  }\n};\nexport const addEntry = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    const {\n      title,\n      content\n    } = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    const entry = diary.createEntry({\n      title,\n      content,\n      createdAt: now,\n      updatedAt: now\n    });\n    diary.update({ ...diary.attrs,\n      updatedAt: now\n    });\n    return {\n      diary: diary.attrs,\n      entry: entry.attrs\n    };\n  } catch (error) {\n    return handleErrors(error, 'Failed to save entry.');\n  }\n};\nexport const getEntries = (schema, req) => {\n  try {\n    const diary = schema.diaries.find(req.params.id);\n    return diary.entry;\n  } catch (error) {\n    return handleErrors(error, 'Failed to get Diary entries.');\n  }\n};\nexport const updateEntry = (schema, req) => {\n  try {\n    const entry = schema.entries.find(req.params.id);\n    const data = JSON.parse(req.requestBody);\n    const now = dayjs().format();\n    entry.update({ ...data,\n      updatedAt: now\n    });\n    return entry.attrs;\n  } catch (error) {\n    return handleErrors(error, 'Failed to update entry.');\n  }\n};","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-Diaries-App/src/Services/mirage/routes/diary.ts"],"names":["handleErrors","dayjs","create","schema","req","title","type","userId","JSON","parse","requestBody","exUser","users","findBy","id","now","format","diary","createDiary","createdAt","updatedAt","user","attrs","error","updateDiary","diaries","find","params","data","update","getDiaries","addEntry","content","entry","createEntry","getEntries","updateEntry","entries"],"mappings":"AACA,SAASA,YAAT,QAA6B,WAA7B;AAIA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,MAAM,GAAG,CAClBC,MADkB,EAElBC,GAFkB,KAGwB;AAC1C,MAAI;AACA,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,QAA0BC,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,WAAf,CAAhC;AACA,UAAMC,MAAM,GAAGR,MAAM,CAACS,KAAP,CAAaC,MAAb,CAAoB;AAAEC,MAAAA,EAAE,EAAEP;AAAN,KAApB,CAAf;;AACA,QAAI,CAACI,MAAL,EAAa;AACT,aAAOX,YAAY,CAAC,IAAD,EAAO,sBAAP,CAAnB;AACH;;AACD,UAAMe,GAAG,GAAGd,KAAK,GAAGe,MAAR,EAAZ;AACA,UAAMC,KAAK,GAAGN,MAAM,CAACO,WAAP,CAAmB;AAC7Bb,MAAAA,KAD6B;AAE7BC,MAAAA,IAF6B;AAG7Ba,MAAAA,SAAS,EAAEJ,GAHkB;AAI7BK,MAAAA,SAAS,EAAEL;AAJkB,KAAnB,CAAd;AAMA,WAAO;AACHM,MAAAA,IAAI,EAAE,EACF,GAAGV,MAAM,CAACW;AADR,OADH;AAIHL,MAAAA,KAAK,EAAEA,KAAK,CAACK;AAJV,KAAP;AAMH,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,yBAAR,CAAnB;AACH;AACJ,CA1BM;AA4BP,OAAO,MAAMC,WAAW,GAAG,CAACrB,MAAD,EAAcC,GAAd,KAAiD;AACxE,MAAI;AACA,UAAMa,KAAK,GAAGd,MAAM,CAACsB,OAAP,CAAeC,IAAf,CAAoBtB,GAAG,CAACuB,MAAJ,CAAWb,EAA/B,CAAd;AACA,UAAMc,IAAI,GAAGpB,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,WAAf,CAAb;AACA,UAAMK,GAAG,GAAGd,KAAK,GAAGe,MAAR,EAAZ;AACAC,IAAAA,KAAK,CAACY,MAAN,CAAa,EACT,GAAGD,IADM;AAETR,MAAAA,SAAS,EAAEL;AAFF,KAAb;AAIA,WAAOE,KAAK,CAACK,KAAb;AACH,GATD,CASE,OAAOC,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,yBAAR,CAAnB;AACH;AACJ,CAbM;AAeP,OAAO,MAAMO,UAAU,GAAG,CAAC3B,MAAD,EAAcC,GAAd,KAAmD;AACzE,MAAI;AACA,UAAMiB,IAAI,GAAGlB,MAAM,CAACS,KAAP,CAAac,IAAb,CAAkBtB,GAAG,CAACuB,MAAJ,CAAWb,EAA7B,CAAb;AACA,WAAOO,IAAI,CAACJ,KAAZ;AACH,GAHD,CAGE,OAAOM,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,6BAAR,CAAnB;AACH;AACJ,CAPM;AAWP,OAAO,MAAMQ,QAAQ,GAAG,CACpB5B,MADoB,EAEpBC,GAFoB,KAGwB;AAC5C,MAAI;AACA,UAAMa,KAAK,GAAGd,MAAM,CAACsB,OAAP,CAAeC,IAAf,CAAoBtB,GAAG,CAACuB,MAAJ,CAAWb,EAA/B,CAAd;AACA,UAAM;AAAET,MAAAA,KAAF;AAAS2B,MAAAA;AAAT,QAAqBxB,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,WAAf,CAA3B;AACA,UAAMK,GAAG,GAAGd,KAAK,GAAGe,MAAR,EAAZ;AACA,UAAMiB,KAAK,GAAGhB,KAAK,CAACiB,WAAN,CAAkB;AAC5B7B,MAAAA,KAD4B;AAE5B2B,MAAAA,OAF4B;AAG5Bb,MAAAA,SAAS,EAAEJ,GAHiB;AAI5BK,MAAAA,SAAS,EAAEL;AAJiB,KAAlB,CAAd;AAMAE,IAAAA,KAAK,CAACY,MAAN,CAAa,EACT,GAAGZ,KAAK,CAACK,KADA;AAETF,MAAAA,SAAS,EAAEL;AAFF,KAAb;AAIA,WAAO;AACHE,MAAAA,KAAK,EAAEA,KAAK,CAACK,KADV;AAEHW,MAAAA,KAAK,EAAEA,KAAK,CAACX;AAFV,KAAP;AAIH,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,uBAAR,CAAnB;AACH;AACJ,CAzBM;AA2BP,OAAO,MAAMY,UAAU,GAAG,CACtBhC,MADsB,EAEtBC,GAFsB,KAGY;AAClC,MAAI;AACA,UAAMa,KAAK,GAAGd,MAAM,CAACsB,OAAP,CAAeC,IAAf,CAAoBtB,GAAG,CAACuB,MAAJ,CAAWb,EAA/B,CAAd;AACA,WAAOG,KAAK,CAACgB,KAAb;AACH,GAHD,CAGE,OAAOV,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,8BAAR,CAAnB;AACH;AACJ,CAVM;AAYP,OAAO,MAAMa,WAAW,GAAG,CAACjC,MAAD,EAAcC,GAAd,KAAiD;AACxE,MAAI;AACA,UAAM6B,KAAK,GAAG9B,MAAM,CAACkC,OAAP,CAAeX,IAAf,CAAoBtB,GAAG,CAACuB,MAAJ,CAAWb,EAA/B,CAAd;AACA,UAAMc,IAAI,GAAGpB,IAAI,CAACC,KAAL,CAAWL,GAAG,CAACM,WAAf,CAAb;AACA,UAAMK,GAAG,GAAGd,KAAK,GAAGe,MAAR,EAAZ;AACAiB,IAAAA,KAAK,CAACJ,MAAN,CAAa,EACT,GAAGD,IADM;AAETR,MAAAA,SAAS,EAAEL;AAFF,KAAb;AAIA,WAAOkB,KAAK,CAACX,KAAb;AACH,GATD,CASE,OAAOC,KAAP,EAAc;AACZ,WAAOvB,YAAY,CAACuB,KAAD,EAAQ,yBAAR,CAAnB;AACH;AACJ,CAbM","sourcesContent":["import { Response, Request } from 'miragejs';\nimport { handleErrors } from '../server';\nimport { Diary } from '../../../Interfaces/diary.interface';\nimport { Entry } from '../../../Interfaces/entry.interface';\nimport { User } from '../../../Interfaces/user.interface';\nimport dayjs from 'dayjs';\n\nexport const create = (\n    schema: any,\n    req: Request\n): { user: User; diary: Diary } | Response => {\n    try {\n        const { title, type, userId } = JSON.parse(req.requestBody) as Partial<Diary>;\n        const exUser = schema.users.findBy({ id: userId });\n        if (!exUser) {\n            return handleErrors(null, 'No such user exists.');\n        }\n        const now = dayjs().format();\n        const diary = exUser.createDiary({\n            title,\n            type,\n            createdAt: now,\n            updatedAt: now,\n        });\n        return {\n            user: {\n                ...exUser.attrs,\n            },\n            diary: diary.attrs,\n        };\n    } catch (error) {\n        return handleErrors(error, 'Failed to create Diary.');\n    }\n};\n\nexport const updateDiary = (schema: any, req: Request): Diary | Response => {\n    try {\n        const diary = schema.diaries.find(req.params.id);\n        const data = JSON.parse(req.requestBody) as Partial<Diary>;\n        const now = dayjs().format();\n        diary.update({\n            ...data,\n            updatedAt: now,\n        });\n        return diary.attrs as Diary;\n    } catch (error) {\n        return handleErrors(error, 'Failed to update Diary.');\n    }\n};\n\nexport const getDiaries = (schema: any, req: Request): Diary[] | Response => {\n    try {\n        const user = schema.users.find(req.params.id);\n        return user.diary as Diary[];\n    } catch (error) {\n        return handleErrors(error, 'Could not get user diaries.');\n    }\n};\n\n\n\nexport const addEntry = (\n    schema: any,\n    req: Request\n): { diary: Diary; entry: Entry } | Response => {\n    try {\n        const diary = schema.diaries.find(req.params.id);\n        const { title, content } = JSON.parse(req.requestBody) as Partial<Entry>;\n        const now = dayjs().format();\n        const entry = diary.createEntry({\n            title,\n            content,\n            createdAt: now,\n            updatedAt: now,\n        });\n        diary.update({\n            ...diary.attrs,\n            updatedAt: now,\n        });\n        return {\n            diary: diary.attrs,\n            entry: entry.attrs,\n        };\n    } catch (error) {\n        return handleErrors(error, 'Failed to save entry.');\n    }\n};\n\nexport const getEntries = (\n    schema: any,\n    req: Request\n): { entries: Entry[] } | Response => {\n    try {\n        const diary = schema.diaries.find(req.params.id);\n        return diary.entry;\n    } catch (error) {\n        return handleErrors(error, 'Failed to get Diary entries.');\n    }\n};\n\nexport const updateEntry = (schema: any, req: Request): Entry | Response => {\n    try {\n        const entry = schema.entries.find(req.params.id);\n        const data = JSON.parse(req.requestBody) as Partial<Entry>;\n        const now = dayjs().format();\n        entry.update({\n            ...data,\n            updatedAt: now,\n        });\n        return entry.attrs as Entry;\n    } catch (error) {\n        return handleErrors(error, 'Failed to update entry.');\n    }\n};"]},"metadata":{},"sourceType":"module"}