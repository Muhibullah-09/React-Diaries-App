{"ast":null,"code":"var _jsxFileName = \"/home/muhibullahkamali/GitHub/React-Diaries-App/src/Features/diary/Diaries.tsx\";\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport http from '../../Services/api/api';\nimport { addDiary } from './DiariesSlice';\nimport Swal from 'sweetalert2';\nimport { setUser } from '../auth/UserSlice';\nimport DiaryTile from './DiaryTile';\nimport { Route, Routes } from 'react-router-dom';\nimport DiaryEntriesList from './DiaryEntriesList';\nimport { useAppDispatch } from '../../store';\nimport dayjs from 'dayjs';\n\nconst Diaries = () => {\n  const dispatch = useAppDispatch();\n  const diaries = useSelector(state => state.diaries);\n  const user = useSelector(state => state.user);\n  useEffect(() => {\n    const fetchDiaries = async () => {\n      if (user) {\n        http.get(`diaries/${user.id}`).then(data => {\n          if (data && data.length > 0) {\n            const sortedByUpdatedAt = data.sort((a, b) => {\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\n            });\n            dispatch(addDiary(sortedByUpdatedAt));\n          }\n        });\n      }\n    };\n\n    fetchDiaries();\n  }, [dispatch, user]);\n\n  const createDiary = async () => {\n    const result = await Swal.mixin({\n      input: 'text',\n      confirmButtonText: 'Next →',\n      showCancelButton: true,\n      progressSteps: ['1', '2']\n    }).queue([{\n      titleText: 'Diary title',\n      input: 'text'\n    }, {\n      titleText: 'Private or public diary?',\n      input: 'radio',\n      inputOptions: {\n        private: 'Private',\n        public: 'Public'\n      },\n      inputValue: 'private'\n    }]);\n\n    if (result.value) {\n      const {\n        value\n      } = result;\n      const {\n        diary,\n        user: _user\n      } = await http.post('/diaries/', {\n        title: value[0],\n        type: value[1],\n        userId: user === null || user === void 0 ? void 0 : user.id\n      });\n\n      if (diary && user) {\n        dispatch(addDiary([diary]));\n        dispatch(addDiary([diary]));\n        dispatch(setUser(_user));\n        return Swal.fire({\n          titleText: 'All done!',\n          confirmButtonText: 'OK!'\n        });\n      }\n    }\n\n    Swal.fire({\n      titleText: 'Cancelled'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '1em 0.4em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/diary/:id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(DiaryEntriesList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createDiary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }, \"Create New\"), diaries.map((diary, idx) => /*#__PURE__*/React.createElement(DiaryTile, {\n    key: idx,\n    diary: diary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default Diaries;","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-Diaries-App/src/Features/diary/Diaries.tsx"],"names":["React","useEffect","useSelector","http","addDiary","Swal","setUser","DiaryTile","Route","Routes","DiaryEntriesList","useAppDispatch","dayjs","Diaries","dispatch","diaries","state","user","fetchDiaries","get","id","then","data","length","sortedByUpdatedAt","sort","a","b","updatedAt","unix","createDiary","result","mixin","input","confirmButtonText","showCancelButton","progressSteps","queue","titleText","inputOptions","private","public","inputValue","value","diary","_user","post","title","type","userId","fire","padding","map","idx"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../Redux/rootreducer';\nimport http from '../../Services/api/api';\nimport { Diary } from '../../Interfaces/diary.interface';\nimport { addDiary } from './DiariesSlice';\nimport Swal from 'sweetalert2';\nimport { setUser } from '../auth/UserSlice';\nimport DiaryTile from './DiaryTile';\nimport { User } from '../../Interfaces/user.interface';\nimport { Route, Routes } from 'react-router-dom';\nimport DiaryEntriesList from './DiaryEntriesList';\nimport { useAppDispatch } from '../../store';\nimport dayjs from 'dayjs';\n\nconst Diaries: FC = () => {\n    const dispatch = useAppDispatch();\n    const diaries = useSelector((state: RootState) => state.diaries);\n    const user = useSelector((state: RootState) => state.user);\n\n    useEffect(() => {\n        const fetchDiaries = async () => {\n            if (user) {\n                http.get<null, Diary[]>(`diaries/${user.id}`).then((data) => {\n                    if (data && data.length > 0) {\n                        const sortedByUpdatedAt = data.sort((a, b) => {\n                            return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\n                        });\n                        dispatch(addDiary(sortedByUpdatedAt));\n                    }\n                });\n            }\n        };\n        fetchDiaries();\n    }, [dispatch, user]);\n\n    const createDiary = async () => {\n        const result: any = await Swal.mixin({\n            input: 'text',\n            confirmButtonText: 'Next →',\n            showCancelButton: true,\n            progressSteps: ['1', '2'],\n        }).queue([\n            {\n                titleText: 'Diary title',\n                input: 'text',\n            },\n            {\n                titleText: 'Private or public diary?',\n                input: 'radio',\n                inputOptions: {\n                    private: 'Private',\n                    public: 'Public',\n                },\n                inputValue: 'private',\n            },\n        ]);\n        if (result.value) {\n            const { value } = result;\n            const {\n                diary,\n                user: _user,\n            } = await http.post<Partial<Diary>, { diary: Diary; user: User }>('/diaries/', {\n                title: value[0],\n                type: value[1],\n                userId: user?.id,\n            });\n            if (diary && user) {\n                dispatch(addDiary([diary] as Diary[]));\n                dispatch(addDiary([diary] as Diary[]));\n                dispatch(setUser(_user));\n                return Swal.fire({\n                    titleText: 'All done!',\n                    confirmButtonText: 'OK!',\n                });\n            }\n        }\n        Swal.fire({\n            titleText: 'Cancelled',\n        });\n    };\n\n    return (\n        <div style={{ padding: '1em 0.4em' }}>\n            <Routes>\n                <Route path=\"/diary/:id\">\n                    <DiaryEntriesList />\n                </Route>\n                <Route path=\"/\">\n                    <button onClick={createDiary}>Create New</button>\n                    {diaries.map((diary, idx) => (\n                        <DiaryTile key={idx} diary={diary} />\n                    ))}\n                </Route>\n            </Routes>\n        </div>\n    );\n};\n\nexport default Diaries;"]},"metadata":{},"sourceType":"module"}