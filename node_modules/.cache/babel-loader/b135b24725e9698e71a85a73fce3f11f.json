{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ehsan\\\\Documents\\\\GitHub\\\\React-Diaries-App\\\\src\\\\features\\\\entry\\\\Editor.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport Markdown from 'markdown-to-jsx';\nimport http from '../../services/api';\nimport { setCurrentlyEditing, setCanEdit } from './editorSlice';\nimport { updateDiary } from '../diary/diariesSlice';\nimport { updateEntry } from './entriesSlice';\nimport { showAlert } from '../../util';\nimport { useAppDispatch } from '../../store';\n\nconst Editor = () => {\n  var _editedEntry$title, _editedEntry$content;\n\n  const {\n    currentlyEditing: entry,\n    canEdit,\n    activeDiaryId\n  } = useSelector(state => state.editor);\n  const [editedEntry, updateEditedEntry] = useState(entry);\n  const dispatch = useAppDispatch();\n\n  const saveEntry = async () => {\n    if (activeDiaryId == null) {\n      return showAlert('Please select a diary.', 'warning');\n    }\n\n    if (entry == null) {\n      http.post(`/diaries/entry/${activeDiaryId}`, editedEntry).then(data => {\n        if (data != null) {\n          const {\n            diary,\n            entry: _entry\n          } = data;\n          dispatch(setCurrentlyEditing(_entry));\n          dispatch(updateDiary(diary));\n        }\n      });\n    } else {\n      http.put(`diaries/entry/${entry.id}`, editedEntry).then(_entry => {\n        if (_entry != null) {\n          dispatch(setCurrentlyEditing(_entry));\n          dispatch(updateEntry(_entry));\n        }\n      });\n    }\n\n    dispatch(setCanEdit(false));\n  };\n\n  useEffect(() => {\n    updateEditedEntry(entry);\n  }, [entry]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"editor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    style: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      marginBottom: '0.2em',\n      paddingBottom: '0.2em',\n      borderBottom: '1px solid rgba(0,0,0,0.1)'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, entry && !canEdit ? /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, entry.title, /*#__PURE__*/React.createElement(\"a\", {\n    href: \"#edit\",\n    onClick: e => {\n      e.preventDefault();\n\n      if (entry != null) {\n        dispatch(setCanEdit(true));\n      }\n    },\n    style: {\n      marginLeft: '0.4em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"(Edit)\")) : /*#__PURE__*/React.createElement(\"input\", {\n    value: (_editedEntry$title = editedEntry === null || editedEntry === void 0 ? void 0 : editedEntry.title) !== null && _editedEntry$title !== void 0 ? _editedEntry$title : '',\n    disabled: !canEdit,\n    onChange: e => {\n      if (editedEntry) {\n        updateEditedEntry({ ...editedEntry,\n          title: e.target.value\n        });\n      } else {\n        updateEditedEntry({\n          title: e.target.value,\n          content: ''\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  })), entry && !canEdit ? /*#__PURE__*/React.createElement(Markdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, entry.content) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"textarea\", {\n    disabled: !canEdit,\n    placeholder: \"Supports markdown!\",\n    value: (_editedEntry$content = editedEntry === null || editedEntry === void 0 ? void 0 : editedEntry.content) !== null && _editedEntry$content !== void 0 ? _editedEntry$content : '',\n    onChange: e => {\n      if (editedEntry) {\n        updateEditedEntry({ ...editedEntry,\n          content: e.target.value\n        });\n      } else {\n        updateEditedEntry({\n          title: '',\n          content: e.target.value\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: saveEntry,\n    disabled: !canEdit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Save\")));\n};\n\nexport default Editor; // Let’s break down what’s happening in the Editor component.\n// First, we are picking some values (with correctly inferred types) from the app’s state using the useSelector() \n// hook from react-redux. In the next line, we have a stateful value called editedEntry whose initial value is \n// set to the editor.currentlyEditing property we’ve selected from the store.\n// Next, we have the saveEntry function which updates or creates a new entry in the API, and dispatches \n// the respective Redux action.\n// Finally, we have a useEffect that is fired when the editor.currentlyEditing property changes. \n// Our editor’s UI (in the component’s return function) has been set up to respond to changes in the state. \n// For example, rendering the entry’s content as JSX elements when the user isn’t editing.\n// With that, the app’s Entry feature should be completely set up. In the next section, we will \n// finish building the Diary feature and then import the main components in the Home component we created earlier.","map":{"version":3,"sources":["C:/Users/Ehsan/Documents/GitHub/React-Diaries-App/src/features/entry/Editor.tsx"],"names":["React","useState","useEffect","useSelector","Markdown","http","setCurrentlyEditing","setCanEdit","updateDiary","updateEntry","showAlert","useAppDispatch","Editor","currentlyEditing","entry","canEdit","activeDiaryId","state","editor","editedEntry","updateEditedEntry","dispatch","saveEntry","post","then","data","diary","_entry","put","id","display","flexWrap","alignItems","marginBottom","paddingBottom","borderBottom","title","e","preventDefault","marginLeft","target","value","content"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../rootReducer';\r\nimport Markdown from 'markdown-to-jsx';\r\nimport http from '../../services/api';\r\nimport { Entry } from '../../interfaces/entry.interface';\r\nimport { Diary } from '../../interfaces/diary.interface';\r\nimport { setCurrentlyEditing, setCanEdit } from './editorSlice';\r\nimport { updateDiary } from '../diary/diariesSlice';\r\nimport { updateEntry } from './entriesSlice';\r\nimport { showAlert } from '../../util';\r\nimport { useAppDispatch } from '../../store';\r\n\r\n\r\nconst Editor: FC = () => {\r\n  const { currentlyEditing: entry, canEdit, activeDiaryId } = useSelector(\r\n    (state: RootState) => state.editor\r\n  );\r\n\r\n  const [editedEntry, updateEditedEntry] = useState(entry);\r\n  const dispatch = useAppDispatch();\r\n\r\n  const saveEntry = async () => {\r\n    if (activeDiaryId == null) {\r\n      return showAlert('Please select a diary.', 'warning');\r\n    }\r\n    if (entry == null) {\r\n      http.post<Entry, { diary: Diary; entry: Entry }>(\r\n          `/diaries/entry/${activeDiaryId}`,\r\n          editedEntry\r\n        )\r\n        .then((data) => {\r\n          if (data != null) {\r\n            const { diary, entry: _entry } = data;\r\n            dispatch(setCurrentlyEditing(_entry));\r\n            dispatch(updateDiary(diary));\r\n          }\r\n        });\r\n    } else {\r\n      http.put<Entry, Entry>(`diaries/entry/${entry.id}`, editedEntry)\r\n        .then((_entry) => {\r\n          if (_entry != null) {\r\n            dispatch(setCurrentlyEditing(_entry));\r\n            dispatch(updateEntry(_entry));\r\n          }\r\n        });\r\n    }\r\n    dispatch(setCanEdit(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateEditedEntry(entry);\r\n  }, [entry]);\r\n\r\n\r\n  return (\r\n    <div className=\"editor\">\r\n      <header\r\n        style={{\r\n          display: 'flex',\r\n          flexWrap: 'wrap',\r\n          alignItems: 'center',\r\n          marginBottom: '0.2em',\r\n          paddingBottom: '0.2em',\r\n          borderBottom: '1px solid rgba(0,0,0,0.1)',\r\n        }}\r\n      >\r\n        {entry && !canEdit ? (\r\n          <h4>\r\n            {entry.title}\r\n            <a href=\"#edit\" onClick={(e) => { e.preventDefault();\r\n                if (entry != null) {\r\n                  dispatch(setCanEdit(true));\r\n                }\r\n              }}\r\n              style={{ marginLeft: '0.4em' }}\r\n            >\r\n              (Edit)\r\n            </a>\r\n          </h4>\r\n        ) : (\r\n          <input\r\n            value={editedEntry?.title ?? ''}\r\n            disabled={!canEdit}\r\n            onChange={(e) => {\r\n              if (editedEntry) {\r\n                updateEditedEntry({\r\n                  ...editedEntry,\r\n                  title: e.target.value,\r\n                });\r\n              } else {\r\n                updateEditedEntry({\r\n                  title: e.target.value,\r\n                  content: '',\r\n                });\r\n              }\r\n            }}\r\n          />\r\n        )}\r\n      </header>\r\n      {entry && !canEdit ? (\r\n        <Markdown>{entry.content}</Markdown>\r\n      ) : (\r\n        <>\r\n          <textarea\r\n            disabled={!canEdit}\r\n            placeholder=\"Supports markdown!\"\r\n            value={editedEntry?.content ?? ''}\r\n            onChange={(e) => {\r\n              if (editedEntry) {\r\n                updateEditedEntry({\r\n                  ...editedEntry,\r\n                  content: e.target.value,\r\n                });\r\n              } else {\r\n                updateEditedEntry({\r\n                  title: '',\r\n                  content: e.target.value,\r\n                });\r\n              }\r\n            }}\r\n          />\r\n          <button onClick={saveEntry} disabled={!canEdit}>\r\n            Save\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Editor;\r\n// Let’s break down what’s happening in the Editor component.\r\n// First, we are picking some values (with correctly inferred types) from the app’s state using the useSelector() \r\n// hook from react-redux. In the next line, we have a stateful value called editedEntry whose initial value is \r\n// set to the editor.currentlyEditing property we’ve selected from the store.\r\n// Next, we have the saveEntry function which updates or creates a new entry in the API, and dispatches \r\n// the respective Redux action.\r\n// Finally, we have a useEffect that is fired when the editor.currentlyEditing property changes. \r\n// Our editor’s UI (in the component’s return function) has been set up to respond to changes in the state. \r\n// For example, rendering the entry’s content as JSX elements when the user isn’t editing.\r\n// With that, the app’s Entry feature should be completely set up. In the next section, we will \r\n// finish building the Diary feature and then import the main components in the Home component we created earlier."]},"metadata":{},"sourceType":"module"}