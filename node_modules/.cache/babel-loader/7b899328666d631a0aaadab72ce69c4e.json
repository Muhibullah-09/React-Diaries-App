{"ast":null,"code":"import { Server, Model, Factory, belongsTo, hasMany, Response } from 'miragejs';\nimport user from './routes/user';\nimport * as diary from './routes/diary'; //If error ocurred\n\nexport const handleErrors = (error, message = 'An error ocurred') => {\n  return new Response(400, undefined, {\n    data: {\n      message,\n      isError: true\n    }\n  });\n}; // hasMany()\n// use for defining to - many relationships\n// belongsTo()\n// use for defining to - one relationships\n\nexport const setupServer = env => {\n  return new Server({\n    environment: env !== null && env !== void 0 ? env : 'development',\n    models: {\n      entry: Model.extend({\n        diary: belongsTo()\n      }),\n      diary: Model.extend({\n        entry: hasMany(),\n        user: belongsTo()\n      }),\n      user: Model.extend({\n        diary: hasMany()\n      })\n    },\n    factories: {\n      user: Factory.extend({\n        username: 'test',\n        password: 'password',\n        email: 'test@email.com'\n      }),\n      dairy: Factory.extend({\n        title: 'abcd',\n        type: 'public',\n        userId: '1'\n      })\n    },\n    seeds: server => {\n      server.create('user');\n    },\n\n    routes() {\n      this.urlPrefix = 'https://diaries.app';\n      this.get('/diaries/entries/:id', diary.getEntries);\n      this.get('/diaries/:id', diary.getDiaries);\n      this.post('/auth/login', user.login);\n      this.post('/auth/signup', user.signup);\n      this.post('/diaries/', diary.create);\n      this.post('/diaries/entry/:id', diary.addEntry);\n      this.put('/diaries/entry/:id', diary.updateEntry);\n      this.put('/diaries/:id', diary.updateDiary);\n    }\n\n  });\n};","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-Diaries-App/src/Services/mirage/server.ts"],"names":["Server","Model","Factory","belongsTo","hasMany","Response","user","diary","handleErrors","error","message","undefined","data","isError","setupServer","env","environment","models","entry","extend","factories","username","password","email","dairy","title","type","userId","seeds","server","create","routes","urlPrefix","get","getEntries","getDiaries","post","login","signup","addEntry","put","updateEntry","updateDiary"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqDC,QAArD,QAAqE,UAArE;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAaC,OAAO,GAAG,kBAAvB,KAA8C;AACtE,SAAO,IAAIL,QAAJ,CAAa,GAAb,EAAkBM,SAAlB,EAA6B;AAChCC,IAAAA,IAAI,EAAE;AACFF,MAAAA,OADE;AAEFG,MAAAA,OAAO,EAAE;AAFP;AAD0B,GAA7B,CAAP;AAMH,CAPM,C,CAUP;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAIC,GAAD,IAA0B;AACjD,SAAO,IAAIf,MAAJ,CAAW;AACdgB,IAAAA,WAAW,EAAED,GAAF,aAAEA,GAAF,cAAEA,GAAF,GAAS,aADN;AAGdE,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAEjB,KAAK,CAACkB,MAAN,CAAa;AAChBZ,QAAAA,KAAK,EAAEJ,SAAS;AADA,OAAb,CADH;AAIJI,MAAAA,KAAK,EAAEN,KAAK,CAACkB,MAAN,CAAa;AAChBD,QAAAA,KAAK,EAAEd,OAAO,EADE;AAEhBE,QAAAA,IAAI,EAAEH,SAAS;AAFC,OAAb,CAJH;AAQJG,MAAAA,IAAI,EAAEL,KAAK,CAACkB,MAAN,CAAa;AACfZ,QAAAA,KAAK,EAAEH,OAAO;AADC,OAAb;AARF,KAHM;AAgBdgB,IAAAA,SAAS,EAAE;AACPd,MAAAA,IAAI,EAAEJ,OAAO,CAACiB,MAAR,CAAe;AACjBE,QAAAA,QAAQ,EAAE,MADO;AAEjBC,QAAAA,QAAQ,EAAE,UAFO;AAGjBC,QAAAA,KAAK,EAAE;AAHU,OAAf,CADC;AAMPC,MAAAA,KAAK,EAAEtB,OAAO,CAACiB,MAAR,CAAe;AAClBM,QAAAA,KAAK,EAAE,MADW;AAElBC,QAAAA,IAAI,EAAE,QAFY;AAGlBC,QAAAA,MAAM,EAAE;AAHU,OAAf;AANA,KAhBG;AA6BdC,IAAAA,KAAK,EAAGC,MAAD,IAAiB;AACpBA,MAAAA,MAAM,CAACC,MAAP,CAAc,MAAd;AACH,KA/Ba;;AAiCdC,IAAAA,MAAM,GAAS;AACX,WAAKC,SAAL,GAAiB,qBAAjB;AAEA,WAAKC,GAAL,CAAS,sBAAT,EAAiC1B,KAAK,CAAC2B,UAAvC;AACA,WAAKD,GAAL,CAAS,cAAT,EAAyB1B,KAAK,CAAC4B,UAA/B;AAEA,WAAKC,IAAL,CAAU,aAAV,EAAyB9B,IAAI,CAAC+B,KAA9B;AACA,WAAKD,IAAL,CAAU,cAAV,EAA0B9B,IAAI,CAACgC,MAA/B;AAEA,WAAKF,IAAL,CAAU,WAAV,EAAuB7B,KAAK,CAACuB,MAA7B;AACA,WAAKM,IAAL,CAAU,oBAAV,EAAgC7B,KAAK,CAACgC,QAAtC;AAEA,WAAKC,GAAL,CAAS,oBAAT,EAA+BjC,KAAK,CAACkC,WAArC;AACA,WAAKD,GAAL,CAAS,cAAT,EAAyBjC,KAAK,CAACmC,WAA/B;AACH;;AA/Ca,GAAX,CAAP;AAiDH,CAlDM","sourcesContent":["import { Server, Model, Factory, belongsTo, hasMany, Response } from 'miragejs';\nimport user from './routes/user';\nimport * as diary from './routes/diary';\n\n//If error ocurred\nexport const handleErrors = (error: any, message = 'An error ocurred') => {\n    return new Response(400, undefined, {\n        data: {\n            message,\n            isError: true,\n        },\n    });\n};\n\n\n// hasMany()\n// use for defining to - many relationships\n// belongsTo()\n// use for defining to - one relationships\n\nexport const setupServer = (env?: string): Server => {\n    return new Server({\n        environment: env ?? 'development',\n\n        models: {\n            entry: Model.extend({\n                diary: belongsTo(),\n            }),\n            diary: Model.extend({\n                entry: hasMany(),\n                user: belongsTo(),\n            }),\n            user: Model.extend({\n                diary: hasMany(),\n            }),\n        },\n\n        factories: {\n            user: Factory.extend({\n                username: 'test',\n                password: 'password',\n                email: 'test@email.com',\n            }),\n            dairy: Factory.extend({\n                title: 'abcd',\n                type: 'public',\n                userId: '1'\n            })\n        },\n\n        seeds: (server): any => {\n            server.create('user');\n        },\n\n        routes(): void {\n            this.urlPrefix = 'https://diaries.app';\n\n            this.get('/diaries/entries/:id', diary.getEntries);\n            this.get('/diaries/:id', diary.getDiaries);\n\n            this.post('/auth/login', user.login);\n            this.post('/auth/signup', user.signup);\n\n            this.post('/diaries/', diary.create);\n            this.post('/diaries/entry/:id', diary.addEntry);\n\n            this.put('/diaries/entry/:id', diary.updateEntry);\n            this.put('/diaries/:id', diary.updateDiary);\n        },\n    });\n};\n"]},"metadata":{},"sourceType":"module"}