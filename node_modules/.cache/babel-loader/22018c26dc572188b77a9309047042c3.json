{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n;\nconst initialState = {\n  token: null,\n  isAuthenticated: false\n};\nconst auth = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    saveToken(state, {\n      payload\n    }) {\n      if (payload) {\n        state.token = payload;\n      }\n    },\n\n    clearToken(state) {\n      state.token = null;\n    },\n\n    setAuthState(state, {\n      payload\n    }) {\n      state.isAuthenticated = payload;\n    }\n\n  }\n});\nexport const {\n  saveToken,\n  clearToken,\n  setAuthState\n} = auth.actions;\nexport default auth.reducer; // In this file, we’re creating a slice for the auth property of our app’s state using the createSlice() function \n// introduced earlier. The reducers property holds a map of reducer functions for updating values in the auth slice. \n// The returned object contains automatically generated action creators and a single slice reducer. We would need to \n// use these in other files so, following the “ducks pattern”, we do named exports of the action creators, and a \n// default export of the reducer function.\n// Let’s set up the remaining reducer slices according to the app state we saw earlier. \n// First, create a file named userSlice.ts in the auth directory and add the following code to it:","map":{"version":3,"sources":["C:/Users/Ehsan/Documents/GitHub/React-Diaries-App/src/features/auth/authSlice.ts"],"names":["createSlice","initialState","token","isAuthenticated","auth","name","reducers","saveToken","state","payload","clearToken","setAuthState","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAMC;AAGD,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,IADuB;AAE9BC,EAAAA,eAAe,EAAE;AAFa,CAAhC;AAMA,MAAMC,IAAI,GAAGJ,WAAW,CAAC;AACvBK,EAAAA,IAAI,EAAE,MADiB;AAEvBJ,EAAAA,YAFuB;AAGvBK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA4C;AACnD,UAAIA,OAAJ,EAAa;AACXD,QAAAA,KAAK,CAACN,KAAN,GAAcO,OAAd;AACD;AACF,KALO;;AAMRC,IAAAA,UAAU,CAACF,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACD,KARO;;AASRS,IAAAA,YAAY,CAACH,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA6C;AACvDD,MAAAA,KAAK,CAACL,eAAN,GAAwBM,OAAxB;AACD;;AAXO;AAHa,CAAD,CAAxB;AAmBA,OAAO,MAAM;AAAEF,EAAAA,SAAF;AAAaG,EAAAA,UAAb;AAAyBC,EAAAA;AAAzB,IAA0CP,IAAI,CAACQ,OAArD;AACP,eAAeR,IAAI,CAACS,OAApB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n\r\ninterface AuthState {\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n};\r\n\r\n\r\nconst initialState: AuthState = {\r\n  token: null,\r\n  isAuthenticated: false,\r\n};\r\n\r\n\r\nconst auth = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    saveToken(state, { payload }: PayloadAction<string>) {\r\n      if (payload) {\r\n        state.token = payload;\r\n      }\r\n    },\r\n    clearToken(state) {\r\n      state.token = null;\r\n    },\r\n    setAuthState(state, { payload }: PayloadAction<boolean>) {\r\n      state.isAuthenticated = payload;\r\n    },\r\n  },\r\n});\r\n\r\n\r\nexport const { saveToken, clearToken, setAuthState } = auth.actions;\r\nexport default auth.reducer;\r\n// In this file, we’re creating a slice for the auth property of our app’s state using the createSlice() function \r\n// introduced earlier. The reducers property holds a map of reducer functions for updating values in the auth slice. \r\n// The returned object contains automatically generated action creators and a single slice reducer. We would need to \r\n// use these in other files so, following the “ducks pattern”, we do named exports of the action creators, and a \r\n// default export of the reducer function.\r\n// Let’s set up the remaining reducer slices according to the app state we saw earlier. \r\n// First, create a file named userSlice.ts in the auth directory and add the following code to it:"]},"metadata":{},"sourceType":"module"}