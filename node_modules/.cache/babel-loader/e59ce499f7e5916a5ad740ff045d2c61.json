{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst entries = createSlice({\n  name: 'entries',\n  initialState: [],\n  reducers: {\n    setEntries(state, {\n      payload\n    }) {\n      return state = payload != null ? payload : [];\n    },\n\n    updateEntry(state, {\n      payload\n    }) {\n      const {\n        id\n      } = payload;\n      const index = state.findIndex(e => e.id === id);\n\n      if (index !== -1) {\n        state.splice(index, 1, payload);\n      }\n    }\n\n  }\n});\nexport const {\n  setEntries,\n  updateEntry\n} = entries.actions;\nexport default entries.reducer;","map":{"version":3,"sources":["/home/muhibullahkamali/GitHub/React-Diaries-App/src/Features/entry/EntriesSlice.ts"],"names":["createSlice","entries","name","initialState","reducers","setEntries","state","payload","updateEntry","id","index","findIndex","e","splice","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAGA,MAAMC,OAAO,GAAGD,WAAW,CAAC;AACxBE,EAAAA,IAAI,EAAE,SADkB;AAExBC,EAAAA,YAAY,EAAE,EAFU;AAGxBC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAAoD;AAC1D,aAAQD,KAAK,GAAGC,OAAO,IAAI,IAAX,GAAkBA,OAAlB,GAA4B,EAA5C;AACH,KAHK;;AAINC,IAAAA,WAAW,CAACF,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA2C;AAClD,YAAM;AAAEE,QAAAA;AAAF,UAASF,OAAf;AACA,YAAMG,KAAK,GAAGJ,KAAK,CAACK,SAAN,CAAiBC,CAAD,IAAOA,CAAC,CAACH,EAAF,KAASA,EAAhC,CAAd;;AACA,UAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdJ,QAAAA,KAAK,CAACO,MAAN,CAAaH,KAAb,EAAoB,CAApB,EAAuBH,OAAvB;AACH;AACJ;;AAVK;AAHc,CAAD,CAA3B;AAiBA,OAAO,MAAM;AAAEF,EAAAA,UAAF;AAAcG,EAAAA;AAAd,IAA8BP,OAAO,CAACa,OAA5C;AACP,eAAeb,OAAO,CAACc,OAAvB","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Entry } from '../../Interfaces/entry.interface';\n\nconst entries = createSlice({\n    name: 'entries',\n    initialState: [] as Entry[],\n    reducers: {\n        setEntries(state, { payload }: PayloadAction<Entry[] | null>) {\n            return (state = payload != null ? payload : []);\n        },\n        updateEntry(state, { payload }: PayloadAction<Entry>) {\n            const { id } = payload;\n            const index = state.findIndex((e) => e.id === id);\n            if (index !== -1) {\n                state.splice(index, 1, payload);\n            }\n        },\n    },\n});\n\nexport const { setEntries, updateEntry } = entries.actions;\nexport default entries.reducer;"]},"metadata":{},"sourceType":"module"}