{"ast":null,"code":"import { Server, Model, Factory, Response, belongsTo, hasMany } from 'miragejs';\nimport user from './routes/user';\nimport * as diary from './routes/diary';\nexport const handleErrors = (error, message = 'An error ocurred') => {\n  console.error('Error: ', error);\n  return new Response(400, undefined, {\n    data: {\n      message,\n      isError: true\n    }\n  });\n};\nexport const setupServer = env => {\n  return new Server({\n    environment: env !== null && env !== void 0 ? env : 'development',\n    models: {\n      entry: Model.extend({\n        diary: belongsTo()\n      }),\n      diary: Model.extend({\n        entry: hasMany(),\n        user: belongsTo()\n      }),\n      user: Model.extend({\n        diary: hasMany()\n      })\n    },\n    factories: {\n      user: Factory.extend({\n        username: 'test',\n        password: 'password',\n        email: 'test@email.com'\n      })\n    },\n    seeds: server => {\n      server.create('user');\n    },\n\n    routes() {\n      this.urlPrefix = 'https://diaries.app';\n      this.get('/diaries/entries/:id', diary.getEntries);\n      this.get('/diaries/:id', diary.getDiaries);\n      this.post('/auth/login', user.login);\n      this.post('/auth/signup', user.signup);\n      this.post('/diaries/', diary.create);\n      this.post('/diaries/entry/:id', diary.addEntry);\n      this.put('/diaries/entry/:id', diary.updateEntry);\n      this.put('/diaries/:id', diary.updateDiary);\n    }\n\n  });\n};","map":{"version":3,"sources":["C:/Users/Ehsan/Documents/GitHub/React-Diaries-App/src/services/mirage/server.ts"],"names":["Server","Model","Factory","Response","belongsTo","hasMany","user","diary","handleErrors","error","message","console","undefined","data","isError","setupServer","env","environment","models","entry","extend","factories","username","password","email","seeds","server","create","routes","urlPrefix","get","getEntries","getDiaries","post","login","signup","addEntry","put","updateEntry","updateDiary"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiCC,QAAjC,EAA2CC,SAA3C,EAAsDC,OAAtD,QAAqE,UAArE;AACA,OAAOC,IAAP,MAAiB,eAAjB;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAaC,OAAO,GAAG,kBAAvB,KAA8C;AACxEC,EAAAA,OAAO,CAACF,KAAR,CAAc,SAAd,EAAyBA,KAAzB;AACA,SAAO,IAAIN,QAAJ,CAAa,GAAb,EAAkBS,SAAlB,EAA6B;AAClCC,IAAAA,IAAI,EAAE;AACJH,MAAAA,OADI;AAEJI,MAAAA,OAAO,EAAE;AAFL;AAD4B,GAA7B,CAAP;AAMD,CARM;AAUP,OAAO,MAAMC,WAAW,GAAIC,GAAD,IAA0B;AACnD,SAAO,IAAIhB,MAAJ,CAAW;AAChBiB,IAAAA,WAAW,EAAED,GAAF,aAAEA,GAAF,cAAEA,GAAF,GAAS,aADJ;AAGhBE,IAAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAElB,KAAK,CAACmB,MAAN,CAAa;AAClBb,QAAAA,KAAK,EAAEH,SAAS;AADE,OAAb,CADD;AAING,MAAAA,KAAK,EAAEN,KAAK,CAACmB,MAAN,CAAa;AAClBD,QAAAA,KAAK,EAAEd,OAAO,EADI;AAElBC,QAAAA,IAAI,EAAEF,SAAS;AAFG,OAAb,CAJD;AAQNE,MAAAA,IAAI,EAAEL,KAAK,CAACmB,MAAN,CAAa;AACjBb,QAAAA,KAAK,EAAEF,OAAO;AADG,OAAb;AARA,KAHQ;AAgBhBgB,IAAAA,SAAS,EAAE;AACTf,MAAAA,IAAI,EAAEJ,OAAO,CAACkB,MAAR,CAAe;AACnBE,QAAAA,QAAQ,EAAE,MADS;AAEnBC,QAAAA,QAAQ,EAAE,UAFS;AAGnBC,QAAAA,KAAK,EAAE;AAHY,OAAf;AADG,KAhBK;AAwBhBC,IAAAA,KAAK,EAAGC,MAAD,IAAiB;AACtBA,MAAAA,MAAM,CAACC,MAAP,CAAc,MAAd;AACD,KA1Be;;AA4BhBC,IAAAA,MAAM,GAAS;AACb,WAAKC,SAAL,GAAiB,qBAAjB;AAEA,WAAKC,GAAL,CAAS,sBAAT,EAAiCvB,KAAK,CAACwB,UAAvC;AACA,WAAKD,GAAL,CAAS,cAAT,EAAyBvB,KAAK,CAACyB,UAA/B;AAEA,WAAKC,IAAL,CAAU,aAAV,EAAyB3B,IAAI,CAAC4B,KAA9B;AACA,WAAKD,IAAL,CAAU,cAAV,EAA0B3B,IAAI,CAAC6B,MAA/B;AAEA,WAAKF,IAAL,CAAU,WAAV,EAAuB1B,KAAK,CAACoB,MAA7B;AACA,WAAKM,IAAL,CAAU,oBAAV,EAAgC1B,KAAK,CAAC6B,QAAtC;AAEA,WAAKC,GAAL,CAAS,oBAAT,EAA+B9B,KAAK,CAAC+B,WAArC;AACA,WAAKD,GAAL,CAAS,cAAT,EAAyB9B,KAAK,CAACgC,WAA/B;AACD;;AA1Ce,GAAX,CAAP;AA4CD,CA7CM","sourcesContent":["import { Server, Model, Factory, Response, belongsTo, hasMany } from 'miragejs';\r\nimport user from './routes/user';\r\nimport * as diary from './routes/diary';\r\n\r\nexport const handleErrors = (error: any, message = 'An error ocurred') => {\r\n  console.error('Error: ', error);\r\n  return new Response(400, undefined, {\r\n    data: {\r\n      message,\r\n      isError: true,\r\n    },\r\n  });\r\n};\r\n\r\nexport const setupServer = (env?: string): Server => {\r\n  return new Server({\r\n    environment: env ?? 'development',\r\n\r\n    models: {\r\n      entry: Model.extend({\r\n        diary: belongsTo(),\r\n      }),\r\n      diary: Model.extend({\r\n        entry: hasMany(),\r\n        user: belongsTo(),\r\n      }),\r\n      user: Model.extend({\r\n        diary: hasMany(),\r\n      }),\r\n    },\r\n\r\n    factories: {\r\n      user: Factory.extend({\r\n        username: 'test',\r\n        password: 'password',\r\n        email: 'test@email.com',\r\n      }),\r\n    },\r\n\r\n    seeds: (server): any => {\r\n      server.create('user');\r\n    },\r\n\r\n    routes(): void {\r\n      this.urlPrefix = 'https://diaries.app';\r\n\r\n      this.get('/diaries/entries/:id', diary.getEntries);\r\n      this.get('/diaries/:id', diary.getDiaries);\r\n\r\n      this.post('/auth/login', user.login);\r\n      this.post('/auth/signup', user.signup);\r\n\r\n      this.post('/diaries/', diary.create);\r\n      this.post('/diaries/entry/:id', diary.addEntry);\r\n\r\n      this.put('/diaries/entry/:id', diary.updateEntry);\r\n      this.put('/diaries/:id', diary.updateDiary);\r\n    },\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}