{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ehsan\\\\Documents\\\\GitHub\\\\React-Diaries-App\\\\src\\\\features\\\\diary\\\\Diaries.tsx\";\nimport React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport http from '../../services/api';\nimport { addDiary } from './diariesSlice';\nimport Swal from 'sweetalert2';\nimport { setUser } from '../auth/userSlice';\nimport DiaryTile from './DiaryTile';\nimport { Route, Switch } from 'react-router-dom';\nimport DiaryEntriesList from './DiaryEntriesList';\nimport { useAppDispatch } from '../../store';\nimport dayjs from 'dayjs';\n\nconst Diaries = () => {\n  const dispatch = useAppDispatch();\n  const diaries = useSelector(state => state.diaries);\n  const user = useSelector(state => state.user);\n  useEffect(() => {\n    const fetchDiaries = async () => {\n      if (user) {\n        http.get(`diaries/${user.id}`).then(data => {\n          if (data && data.length > 0) {\n            const sortedByUpdatedAt = data.sort((a, b) => {\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\n            });\n            dispatch(addDiary(sortedByUpdatedAt));\n          }\n        });\n      }\n    };\n\n    fetchDiaries();\n  }, [dispatch, user]);\n\n  const createDiary = async () => {\n    const result = await Swal.mixin({\n      input: 'text',\n      confirmButtonText: 'Next &rarr;',\n      showCancelButton: true,\n      progressSteps: ['1', '2']\n    }).queue([{\n      titleText: 'Diary title',\n      input: 'text'\n    }, {\n      titleText: 'Private or public diary?',\n      input: 'radio',\n      inputOptions: {\n        private: 'Private',\n        public: 'Public'\n      },\n      inputValue: 'private'\n    }]);\n\n    if (result.value) {\n      const {\n        value\n      } = result;\n      const {\n        diary,\n        user: _user\n      } = await http.post('/diaries/', {\n        title: value[0],\n        type: value[1],\n        userId: user === null || user === void 0 ? void 0 : user.id\n      });\n\n      if (diary && user) {\n        dispatch(addDiary([diary]));\n        dispatch(addDiary([diary]));\n        dispatch(setUser(_user));\n        return Swal.fire({\n          titleText: 'All done!',\n          confirmButtonText: 'OK!'\n        });\n      }\n    }\n\n    Swal.fire({\n      titleText: 'Cancelled'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '1em 0.4em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/diary/:id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DiaryEntriesList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: createDiary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, \"Create New\"), diaries.map((diary, idx) => /*#__PURE__*/React.createElement(DiaryTile, {\n    key: idx,\n    diary: diary,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  })))));\n};\n\nexport default Diaries; // In this component, we have a function to fetch the user’s diaries inside a useEffect hook, \n// and a function to create a new diary. We also render our components in react-router’s <Route /> \n// component, rendering a diary’s entries if its id matches the path param in the route /diary/:id, \n// or otherwise rendering a list of the user’s diaries.","map":{"version":3,"sources":["C:/Users/Ehsan/Documents/GitHub/React-Diaries-App/src/features/diary/Diaries.tsx"],"names":["React","useEffect","useSelector","http","addDiary","Swal","setUser","DiaryTile","Route","Switch","DiaryEntriesList","useAppDispatch","dayjs","Diaries","dispatch","diaries","state","user","fetchDiaries","get","id","then","data","length","sortedByUpdatedAt","sort","a","b","updatedAt","unix","createDiary","result","mixin","input","confirmButtonText","showCancelButton","progressSteps","queue","titleText","inputOptions","private","public","inputValue","value","diary","_user","post","title","type","userId","fire","padding","map","idx"],"mappings":"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","sourcesContent":["import React, { FC, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../rootReducer';\r\nimport http from '../../services/api';\r\nimport { Diary } from '../../interfaces/diary.interface';\r\nimport { addDiary } from './diariesSlice';\r\nimport Swal from 'sweetalert2';\r\nimport { setUser } from '../auth/userSlice';\r\nimport DiaryTile from './DiaryTile';\r\nimport { User } from '../../interfaces/user.interface';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport DiaryEntriesList from './DiaryEntriesList';\r\nimport { useAppDispatch } from '../../store';\r\nimport dayjs from 'dayjs';\r\n\r\nconst Diaries: FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const diaries = useSelector((state: RootState) => state.diaries);\r\n  const user = useSelector((state: RootState) => state.user);\r\n\r\n  useEffect(() => {\r\n    const fetchDiaries = async () => {\r\n      if (user) {\r\n        http.get<null, Diary[]>(`diaries/${user.id}`).then((data) => {\r\n          if (data && data.length > 0) {\r\n            const sortedByUpdatedAt = data.sort((a, b) => {\r\n              return dayjs(b.updatedAt).unix() - dayjs(a.updatedAt).unix();\r\n            });\r\n            dispatch(addDiary(sortedByUpdatedAt));\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    fetchDiaries();\r\n  }, [dispatch, user]);\r\n\r\n  const createDiary = async () => {\r\n    const result = await Swal.mixin({\r\n      input: 'text',\r\n      confirmButtonText: 'Next &rarr;',\r\n      showCancelButton: true,\r\n      progressSteps: ['1', '2'],\r\n    }).queue([\r\n      {\r\n        titleText: 'Diary title',\r\n        input: 'text',\r\n      },\r\n      {\r\n        titleText: 'Private or public diary?',\r\n        input: 'radio',\r\n        inputOptions: {\r\n          private: 'Private',\r\n          public: 'Public',\r\n        },\r\n        inputValue: 'private',\r\n      },\r\n    ]);\r\n    if (result.value) {\r\n      const { value } = result;\r\n      const { diary, user: _user } = await http.post<\r\n        Partial<Diary>,\r\n        { diary: Diary; user: User }\r\n      >('/diaries/', {\r\n        title: value[0],\r\n        type: value[1],\r\n        userId: user?.id,\r\n      });\r\n      if (diary && user) {\r\n        dispatch(addDiary([diary] as Diary[]));\r\n        dispatch(addDiary([diary] as Diary[]));\r\n        dispatch(setUser(_user));\r\n\r\n        return Swal.fire({\r\n          titleText: 'All done!',\r\n          confirmButtonText: 'OK!',\r\n        });\r\n      }\r\n    }\r\n    Swal.fire({\r\n      titleText: 'Cancelled',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '1em 0.4em' }}>\r\n      <Switch>\r\n        <Route path=\"/diary/:id\">\r\n          <DiaryEntriesList />\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <button onClick={createDiary}>Create New</button>\r\n          {diaries.map((diary, idx) => (\r\n            <DiaryTile key={idx} diary={diary} />\r\n          ))}\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diaries;\r\n// In this component, we have a function to fetch the user’s diaries inside a useEffect hook, \r\n// and a function to create a new diary. We also render our components in react-router’s <Route /> \r\n// component, rendering a diary’s entries if its id matches the path param in the route /diary/:id, \r\n// or otherwise rendering a list of the user’s diaries."]},"metadata":{},"sourceType":"module"}