/**
 * Actions represent the type of change to a location value.
 */
export declare enum Action {
    /**
     * A POP indicates a change to an arbitrary index in the history stack, such
     * as a back or forward navigation. It does not describe the direction of the
     * navigation, only that the current index changed.
     *
     * Note: This is the default action for newly created history objects.
     */
    Pop = "POP",
    /**
     * A PUSH indicates a new entry being added to the history stack, such as when
     * a link is clicked and a new page loads. When this happens, all subsequent
     * entries in the stack are lost.
     */
    Push = "PUSH",
    /**
     * A REPLACE indicates the entry at the current index in the history stack
     * being replaced by a new one.
     */
    Replace = "REPLACE"
}
/**
 * A URL path including the pathname, search string, and hash. No URL protocol
 * or domain information should be part of a path.
 */
export declare type Path = string;
/**
 * An object that is used to associate some arbitrary data with a location, but
 * that does not appear in the URL path.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/History/state
 */
export declare type State = object | null;
/**
 * The pieces of a URL path.
 */
export interface PathPieces {
    /**
     * The URL pathname, beginning with a /.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname
     */
    pathname?: string;
    /**
     * The URL search string, beginning with a ?.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/search
     */
    search?: string;
    /**
     * The URL fragment identifier, beginning with a #.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/hash
     */
    hash?: string;
}
/**
 * The pieces of a Location object.
 *
 * @typeParam S - The type for the state object (optional)
 */
export interface LocationPieces<S extends State = State> extends PathPieces {
    /**
     * Additional state tied to this location.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/History/state
     */
    state?: S;
    /**
     * A unique string associated with this location. May be used to safely store
     * and retrieve data in some other storage API, like `localStorage`. This
     * value is always "default" on the initial location.
     */
    key?: string;
}
/**
 * A location represents the current state in a history stack. It contains
 * information about the URL path, as well as some state and a key. Analogous
 * to the web's window.location API, but much smaller.
 *
 * @typeParam S - The type for the state object (optional)
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/location
 */
export interface Location<S extends State = State> extends LocationPieces<S> {
    /**
     * The URL pathname, beginning with a /.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname
     */
    pathname: string;
    /**
     * The URL search string, beginning with a ?.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/search
     */
    search: string;
    /**
     * The URL fragment identifier, beginning with a #.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/Location/hash
     */
    hash: string;
    /**
     * Additional state tied to this location.
     *
     * @see https://developer.mozilla.org/en-US/docs/Web/API/History/state
     */
    state: S;
    /**
     * A unique string associated with this location. May be used to safely store
     * and retrieve data in some other storage API, like `localStorage`. This
     * value is always "default" on the initial location.
     */
    key: string;
}
/**
 * A change to the current location.
 *
 * @typeParam S - The type for the location's state object (optional)
 */
export interface Update<S extends State = State> {
    /**
     * The action that triggered the change.
     */
    action: Action;
    /**
     * The new location.
     */
    location: Location<S>;
}
/**
 * A function that receives notifications about location changes.
 *
 * @typeParam S - The type for the location's state object (optional)
 */
export interface Listener<S extends State = State> {
    (update: Update<S>): void;
}
/**
 * A change to the current location that was blocked. May be retried
 * after obtaining user confirmation.
 *
 * @typeParam S - The type for the location's state object (optional)
 */
export interface Transition<S extends State = State> extends Update<S> {
    /**
     * Retries the update to the current location.
     */
    retry(): void;
}
/**
 * A function that receives transitions when navigation is blocked.
 *
 * @typeParam S - The type for the location's state object (optional)
 */
export interface Blocker<S extends State = State> {
    (tx: Transition<S>): void;
}
/**
 * A URL path or an object that contains the pieces of a URL path.
 */
export declare type To = Path | PathPieces;
/**
 * A history is an interface to the navigation stack. The history serves as the
 * source of truth for the current location, as well as provides a set of
 * methods that may be used to change it.
 *
 * It is analogous to the web's window.history object, but with a smaller, more
 * focused API.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/history
 */
export interface History<S extends State = State> {
    /**
     * The last action that modified the current location. This will always be
     * Action.Pop when a history instance is first created. This value is mutable.
     */
    readonly action: Action;
    /**
     * The current location. This value is mutable.
     */
    readonly location: Location<S>;
    /**
     * Returns a valid href for the given `to` value that may be used as
     * the value of an <a href> attribute.
     *
     * @param to - The destination URL
     */
    createHref(to: Path | PathPieces): string;
    /**
     * Pushes a new location onto the history stack, increasing its length by one.
     * If there were any entries in the stack after the current one, they are
     * lost.
     *
     * @param to - The new URL
     * @param state - Data to associate with the new location
     */
    push(to: To, state?: State): void;
    /**
     * Replaces the current location in the history stack with a new one.  The
     * location that was replaced will no longer be available.
     *
     * @param to - The new URL
     * @param state - Data to associate with the new location
     */
    replace(to: To, state?: State): void;
    /**
     * Navigates `n` entries backward/forward in the history stack relative to the
     * current index. For example, a "back" navigation would use go(-1).
     *
     * @param n - The delta in the stack index
     */
    go(n: number): void;
    /**
     * Navigates to the previous entry in the stack. Identical to go(-1).
     *
     * Warning: if the current location is the first location in the stack, this
     * will unload the current document.
     */
    back(): void;
    /**
     * Navigates to the next entry in the stack. Identical to go(1).
     */
    forward(): void;
    /**
     * Sets up a listener that will be called whenever the current location
     * changes.
     *
     * @returns unlisten - A function that may be used to stop listening
     */
    listen(listener: Listener<S>): () => void;
    /**
     * Prevents the current location from changing and sets up a listener that
     * will be called instead.
     *
     * @returns unblock - A function that may be used to stop blocking
     */
    block(blocker: Blocker<S>): () => void;
}
/**
 * A browser history stores the current location in regular URLs in a web
 * browser environment. This is the standard for most web apps and provides the
 * cleanest URLs the browser's address bar.
 */
export interface BrowserHistory<S extends State = State> extends History<S> {
}
/**
 * A hash history stores the current location in the fragment identifier portion
 * of the URL in a web browser environment.
 *
 * This is ideal for apps that do not control the server for some reason
 * (because the fragment identifier is never sent to the server), including some
 * shared hosting environments that do not provide fine-grained controls over
 * which pages are served at which URLs.
 */
export interface HashHistory<S extends State = State> extends History<S> {
}
/**
 * A memory history stores locations in memory. This is useful in stateful
 * environments where there is no web browser, such as node tests or React
 * Native.
 */
export interface MemoryHistory<S extends State = State> extends History<S> {
    index: number;
}
/**
 * Browser history stores the location in regular URLs. This is the standard for
 * most web apps, but it requires some configuration on the server to ensure you
 * serve the same app at multiple URLs.
 */
export declare function createBrowserHistory({ window }?: {
    window?: Window;
}): BrowserHistory;
/**
 * Hash history stores the location in window.location.hash. This makes it ideal
 * for situations where you don't want to send the location to the server for
 * some reason, either because you do cannot configure it or the URL space is
 * reserved for something else.
 */
export declare function createHashHistory({ window }?: {
    window?: Window;
}): HashHistory;
export declare type InitialEntry = Path | LocationPieces;
/**
 * Memory history stores the current location in memory. It is designed for use
 * in stateful non-browser environments like headless tests (in node.js) and
 * React Native.
 */
export declare function createMemoryHistory({ initialEntries, initialIndex }?: {
    initialEntries?: InitialEntry[];
    initialIndex?: number;
}): MemoryHistory;
export declare function createPath({ pathname, search, hash }: PathPieces): string;
export declare function parsePath(path: Path): PathPieces;
